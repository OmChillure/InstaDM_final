generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]     @relation("UserCampaigns")
  lists     AudienceList[]

  tasks   Tasks[]

  @@map("user")
}

model Campaign {
  id             String  @id @default(uuid())
  title          String
  description    String?
  workingHours   Int[]
  messagesPerDay Int[]

  userId String
  user   User   @relation("UserCampaigns", fields: [userId], references: [id])

  lists     AudienceList[] @relation("CampaignAudienceLists")
  task      Tasks?
  messages  Message[]      @relation("CampaignMessages")
  followUps FollowUp[]     @relation("CampaignFollowUps")


  status CampignStatus @default(CREATED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campaigns")
}

model AudienceList {
  id        String   @id @default(uuid())
  name      String
  desc      String?
  userNames String[]

  type            AudienceListType
  parentUsernames String[]

  task Tasks?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  campaigns Campaign[] @relation("CampaignAudienceLists")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audienceLists")
}

model Message {
  id         String   @id @default(uuid())
  campaignId String
  campaign   Campaign @relation("CampaignMessages", fields: [campaignId], references: [id])

  variants MessageVariant[] @relation("MessageVariants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model MessageVariant {
  id              String   @id @default(uuid())
  message         String
  variables       String[]
  parentMessageId String
  parentMessage   Message  @relation("MessageVariants", fields: [parentMessageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messageVariants")
}

model FollowUp {
  id         String   @id @default(uuid())
  campaignId String
  campaign   Campaign @relation("CampaignFollowUps", fields: [campaignId], references: [id])

  variants FollowUpVariant[] @relation("FollowUpVariants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("followUps")
}

model FollowUpVariant {
  id         String   @id @default(uuid())
  message    String
  variables  String[] // Variables that can be included in the follow-up message
  followUpId String
  followUp   FollowUp @relation("FollowUpVariants", fields: [followUpId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("followUpVariants")
}

model Tasks {
  id String @id @default(uuid())

  type   TasksType
  status TasksStatus @default(NOT_STARTED)

  userId String
  User   User @relation(fields: [userId], references: [id])

  campaignId String? @unique
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  listId String? @unique
  list   AudienceList? @relation(fields: [listId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

enum InteractionType {
  MESSAGE
  FOLLOW_UP
}

enum TasksType {
  GET_FOLLOWERS
  GET_FOLLOWINGS
  START_CAMPAIGNING
  GET_LIKES
}

enum TasksStatus {
  NOT_STARTED
  PENDING
  COMPLETED
}

enum CampignStatus {
  CREATED
  LAUNCHED
  PENDING
  COMPLETED
  REJECTED
}

enum AudienceListType {
  CSV
  JSON
  FOLLOWERS
  FOLLOWINGS
  LIKES
  RAW
}
