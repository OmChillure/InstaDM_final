"use client"

import DashboardWrapper from "@/components/hoc/DashboardPagesWrapper";
import React from "react";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { createCampaignSchema } from "@/schemas/campaigns";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Range } from 'react-range';
// import {createCampaign} from "@/actions/"

const Page = () => {
    const form = useForm({
        resolver: zodResolver(createCampaignSchema),
        defaultValues: {
          title: "",
          description: "",
          workingHours: [11,18],
          messagesPerDay: [20,50],
        },
      });

      async function onSubmit(values: z.infer<typeof createCampaignSchema>) {
        try {
            // createCampaign
            
        } catch (error) {
            
        }
      }

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        onReset={() => {
          form.reset();
        }}
        className="w-full md:w-3/4 h-full flex flex-col gap-8 "
      >
        <div>
          <FormField
            control={form?.control}
            name="title"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Campaign Title</FormLabel>
                <FormControl>
                  <Input placeholder="Campaign 01" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div>
          <FormField
            control={form?.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Description
                </FormLabel>
                <FormControl>
                  <Textarea placeholder="Describe the campaign" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {/* <div className="grid grid-rows-1 md:grid-cols-2 gap-8 md:gap-20">
          <FormField
            control={form?.control}
            name="delivery"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  Delivery Address (
                  <span
                    className="cursor-pointer hover:text-blue-600"
                    onClick={handleCopyInstitute}
                  >
                    Deliver to your institute
                  </span>
                  )
                </FormLabel>
                <FormControl>
                  <Input
                    placeholder="Address of Delivery....."
                    type="type"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form?.control}
            name="amount"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Amount</FormLabel>
                <FormControl>
                  <Input placeholder="xx" type="number" {...field} disabled />
                </FormControl>
                <FormDescription>
                  This is an autogenerated & estimated value and may change on
                  negotiation.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        </div> */}
        
        <div>
      <FormField
        control={form?.control}
        name="workingHours"
        render={({ field }) => (
            <FormItem className="space-y-12">
            <FormLabel>Working Hours</FormLabel>
            <Range
              values={field?.value || [8, 22]}
              step={1}
              min={1}
              max={24}
              onChange={(values) => field.onChange(values)}
              renderTrack={({ props, children }) => (
                <div {...props} className="h-1 bg-gray-200 rounded-md">
                  {children}
                </div>
              )}
              renderThumb={({ props, index }) => (
                <div
                  {...props}
                  className="w-4 h-4 bg-black rounded-full flex items-center justify-center"
                >
                  <span className="absolute -top-6 text-sm">{field.value[index]}:00</span>
                </div>
              )}
            />
            <FormMessage />
          </FormItem>
        )}
      />
    </div>

    <div>
      <FormField
        control={form?.control}
        name="messagesPerDay"
        render={({ field }) => (
          <FormItem className="space-y-14">
            <FormLabel>Messages Per Day</FormLabel>
            <Range
              values={field?.value || [50, 70]}
              step={1}
              min={10}
              max={100}
              onChange={(values) => field.onChange(values)}
              renderTrack={({ props, children }) => (
                <div {...props} className="h-1 bg-gray-200 rounded-md">
                  {children}
                </div>
              )}
              renderThumb={({ props, index }) => (
                <div
                  {...props}
                  className="w-4 h-4 bg-black rounded-full flex items-center justify-center"
                >
                  <span className="absolute -top-6 text-sm">{field.value[index]}</span>
                </div>
              )}
            />
            <FormMessage />
          </FormItem>
        )}
      />
    </div>


        <div className="flex items-center justify-between">
          <Button type="reset" className="w-max">
            Reset
          </Button>
          <Button type="submit" className="w-max">
            Save & Next
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default DashboardWrapper(Page, "Create New Campaign");
